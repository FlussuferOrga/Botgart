/* tslint:disable */
/* eslint-disable */
/**
 * ts-gw2-verifyBot
 * ts-gw2-verifyBot
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.js';
/**
 * 
 * @export
 * @interface Commander
 */
export interface Commander {
    /**
     * 
     * @type {string}
     * @memberof Commander
     */
    accountName: string | null;
    /**
     * 
     * @type {string}
     * @memberof Commander
     */
    tsChannelName: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Commander
     */
    tsChannelPath: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Commander
     */
    tsCluid: string;
    /**
     * 
     * @type {string}
     * @memberof Commander
     */
    tsDisplayName: string;
    /**
     * 
     * @type {string}
     * @memberof Commander
     */
    tsJoinUrl: string | null;
    /**
     * 
     * @type {string}
     * @memberof Commander
     */
    leadtype: CommanderLeadtypeEnum;
}


/**
 * @export
 */
export const CommanderLeadtypeEnum = {
    Unknown: 'UNKNOWN',
    Ppt: 'PPT',
    Ppk: 'PPK'
} as const;
export type CommanderLeadtypeEnum = typeof CommanderLeadtypeEnum[keyof typeof CommanderLeadtypeEnum];


/**
 * Check if a given object implements the Commander interface.
 */
export function instanceOfCommander(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "accountName" in value;
    isInstance = isInstance && "tsChannelName" in value;
    isInstance = isInstance && "tsChannelPath" in value;
    isInstance = isInstance && "tsCluid" in value;
    isInstance = isInstance && "tsDisplayName" in value;
    isInstance = isInstance && "tsJoinUrl" in value;
    isInstance = isInstance && "leadtype" in value;

    return isInstance;
}

export function CommanderFromJSON(json: any): Commander {
    return CommanderFromJSONTyped(json, false);
}

export function CommanderFromJSONTyped(json: any, ignoreDiscriminator: boolean): Commander {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accountName': json['account_name'],
        'tsChannelName': json['ts_channel_name'],
        'tsChannelPath': json['ts_channel_path'],
        'tsCluid': json['ts_cluid'],
        'tsDisplayName': json['ts_display_name'],
        'tsJoinUrl': json['ts_join_url'],
        'leadtype': json['leadtype'],
    };
}

export function CommanderToJSON(value?: Commander | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'account_name': value.accountName,
        'ts_channel_name': value.tsChannelName,
        'ts_channel_path': value.tsChannelPath,
        'ts_cluid': value.tsCluid,
        'ts_display_name': value.tsDisplayName,
        'ts_join_url': value.tsJoinUrl,
        'leadtype': value.leadtype,
    };
}

