/* tslint:disable */
/* eslint-disable */
/**
 * ts-gw2-verifyBot
 * ts-gw2-verifyBot
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  ErrorResponse,
  GuildChannelStats,
  GuildCreateRequest,
  GuildDeleteRequest,
} from '../models/index.js';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GuildChannelStatsFromJSON,
    GuildChannelStatsToJSON,
    GuildCreateRequestFromJSON,
    GuildCreateRequestToJSON,
    GuildDeleteRequestFromJSON,
    GuildDeleteRequestToJSON,
} from '../models/index.js';

export interface GuildCreateOperationRequest {
    guildCreateRequest: GuildCreateRequest;
}

export interface GuildDeleteOperationRequest {
    guildDeleteRequest: GuildDeleteRequest;
}

/**
 * GuildsApi - interface
 * 
 * @export
 * @interface GuildsApiInterface
 */
export interface GuildsApiInterface {
    /**
     * 
     * @summary List current Guild Channels
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuildsApiInterface
     */
    guildChannelListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GuildChannelStats>>>;

    /**
     * List current Guild Channels
     */
    guildChannelList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GuildChannelStats>>;

    /**
     * 
     * @summary Create a Guild Group and channel
     * @param {GuildCreateRequest} guildCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuildsApiInterface
     */
    guildCreateRaw(requestParameters: GuildCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Create a Guild Group and channel
     */
    guildCreate(requestParameters: GuildCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * 
     * @summary Deletes a Guild channel and Group
     * @param {GuildDeleteRequest} guildDeleteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuildsApiInterface
     */
    guildDeleteRaw(requestParameters: GuildDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Deletes a Guild channel and Group
     */
    guildDelete(requestParameters: GuildDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

}

/**
 * 
 */
export class GuildsApi extends runtime.BaseAPI implements GuildsApiInterface {

    /**
     * List current Guild Channels
     */
    async guildChannelListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GuildChannelStats>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/guild/channels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GuildChannelStatsFromJSON));
    }

    /**
     * List current Guild Channels
     */
    async guildChannelList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GuildChannelStats>> {
        const response = await this.guildChannelListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a Guild Group and channel
     */
    async guildCreateRaw(requestParameters: GuildCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.guildCreateRequest === null || requestParameters.guildCreateRequest === undefined) {
            throw new runtime.RequiredError('guildCreateRequest','Required parameter requestParameters.guildCreateRequest was null or undefined when calling guildCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/guild`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GuildCreateRequestToJSON(requestParameters.guildCreateRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create a Guild Group and channel
     */
    async guildCreate(requestParameters: GuildCreateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.guildCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a Guild channel and Group
     */
    async guildDeleteRaw(requestParameters: GuildDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.guildDeleteRequest === null || requestParameters.guildDeleteRequest === undefined) {
            throw new runtime.RequiredError('guildDeleteRequest','Required parameter requestParameters.guildDeleteRequest was null or undefined when calling guildDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/guild`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: GuildDeleteRequestToJSON(requestParameters.guildDeleteRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Deletes a Guild channel and Group
     */
    async guildDelete(requestParameters: GuildDeleteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.guildDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
