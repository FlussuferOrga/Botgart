{
  "root": true,
  "overrides": [
    {
      "files": ["*.ts", "*.tsx", "*.js"],
      "plugins": [
        "@typescript-eslint"
      ],
      "parser": "@typescript-eslint/parser",
      "parserOptions": {
        "project": ["tsconfig.json"]
      },
      "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/eslint-recommended",
        "plugin:@typescript-eslint/recommended"
      ],
      "rules": {
        "yoda": "error",
        "no-console": "error",
        "no-unreachable-loop": "error",
        "no-alert": "error",
        "no-eval": "error",
        "no-implied-eval": "off", "@typescript-eslint/no-implied-eval": "error",
        "no-extend-native": "warn",
        "no-extra-bind": "warn",
        "no-extra-label": "warn",
        "no-eq-null": "warn",
        "no-floating-decimal": "error",
        "no-invalid-this": "off", "@typescript-eslint/no-invalid-this": "error",
        "no-iterator": "error",
        "no-lone-blocks": "warn",
        "no-multi-spaces": "error",
        "no-new": "error",
        "no-new-func": "error",
        "no-new-wrappers": "error",
        "no-nonoctal-decimal-escape": "error",
        "no-param-reassign": "warn",
        "no-proto": "error",
        "no-return-await": "off",
        "@typescript-eslint/return-await": "error",
        "no-self-compare": "error",
        "no-throw-literal": "off", "@typescript-eslint/no-throw-literal": "error",
        "no-unmodified-loop-condition": "error",
        "no-unused-expressions": "off", "@typescript-eslint/no-unused-expressions": "warn",
        "no-useless-call": "warn",
        "no-useless-concat": "warn",
        "no-useless-return": "error", "no-void": "warn",
        "no-warning-comments": "warn",
        "prefer-promise-reject-errors": "warn",
        "prefer-regex-literals": "warn",
        "quotes": "off", "@typescript-eslint/quotes": ["error", "double", {"avoidEscape": false}],
        "array-bracket-newline": ["warn", "consistent"],
        "array-bracket-spacing": ["warn", "never"],
        "block-spacing": ["warn", "never"],
        "brace-style": "off", "@typescript-eslint/brace-style": ["error", "1tbs", {"allowSingleLine": true}],
        "comma-dangle": "off", "@typescript-eslint/comma-dangle": [
          "error", {
            "arrays": "only-multiline",
            "objects": "only-multiline",
            "imports": "never",
            "exports": "never",
            "functions": "never"
          }
        ],
        "comma-spacing": "off", "@typescript-eslint/comma-spacing": ["error", {"before": false, "after": true}],
        "comma-style": ["error", "last"],
        "computed-property-spacing": ["error", "never"],
        "eol-last": ["error", "never"],
        "func-call-spacing": "off", "@typescript-eslint/func-call-spacing": ["error", "never"],
        "func-style": ["error", "declaration", {"allowArrowFunctions": true}],
        // "function-call-argument-newline": ["error","consistent"],
        // "function-paren-newline": ["error", "multiline-arguments"]
        "key-spacing": [
          "error", {
            "multiLine": {
              "beforeColon": false,
              "afterColon": true
            }
          }
        ],
        "keyword-spacing": "off", "@typescript-eslint/keyword-spacing": ["error"],
        // "linebreak-style": ["error", "windows"] deactiveated due to git
        "lines-between-class-members": "off",
        "@typescript-eslint/lines-between-class-members": ["error", "always", {"exceptAfterSingleLine": true}],
        "max-depth": ["error", 4],
        "max-len": [
          "error",
          {
            "code": 200,
            "ignoreStrings": true,
            "ignoreTrailingComments": true,
            "ignoreTemplateLiterals": true,
            "ignoreRegExpLiterals": true
          }
        ],
        "max-lines": ["error", {"max": 500, "skipComments": true}],
        "max-nested-callbacks": ["error"],
        "max-params": ["error", 6],
        "max-statements-per-line": ["error"],
        "new-cap": ["error"],
        "new-parens": ["error"],
        "newline-per-chained-call": ["error", {"ignoreChainWithDepth": 4}],
        "no-array-constructor": "off", "@typescript-eslint/no-array-constructor": ["error"],
        "no-lonely-if": ["error"],
        "no-mixed-spaces-and-tabs": ["error"],
        "no-multi-assign": ["error"],
        "no-multiple-empty-lines": ["error", {"max": 2, "maxEOF": 0, "maxBOF": 0}],
        "no-nested-ternary": ["warn"],
        "no-new-object": ["error"],
        "no-tabs": ["error"],
        "no-trailing-spaces": "warn",
        "no-unneeded-ternary": "error",
        "no-whitespace-before-property": "error",
        "object-curly-newline": ["error", {"consistent": true}],
        "object-curly-spacing": "off", "@typescript-eslint/object-curly-spacing": ["error", "always"],
        "object-property-newline": ["error", {"allowAllPropertiesOnSameLine": true}],
        "one-var": ["error", "never"],
        "operator-linebreak": [
          "error",
          "before", {
            "overrides": {
              "=": "after"
            }
          }
        ],
        "padded-blocks": ["error", "never", {"allowSingleLineBlocks": true}],
        "prefer-object-spread": "error",
        "quote-props": ["error", "consistent"],
        "semi": "off", "@typescript-eslint/semi": ["error", "always"],
        "semi-spacing": ["error", {"before": false, "after": true}],
        "semi-style": ["error", "last"],
        "space-before-blocks": "error",
        "space-before-function-paren": "off", "@typescript-eslint/space-before-function-paren": [
          "error", {
            "anonymous": "always",
            "named": "never",
            "asyncArrow": "always"
          }
        ],
        "space-in-parens": ["error", "never"],
        "space-infix-ops": "off", "@typescript-eslint/space-infix-ops": "error",
        "space-unary-ops": "error",
        "spaced-comment": "error",
        "switch-colon-spacing": ["error"],
        "arrow-body-style": ["error", "as-needed"],
        // "arrow-parens": ["error","as-needed"],
        "arrow-spacing": "error",
        "constructor-super": "error",
        "generator-star-spacing": ["error", {"before": true, "after": false}],
        "no-duplicate-imports": "off", "@typescript-eslint/no-duplicate-imports": "error",
        "no-new-symbol": "error",
        "no-useless-computed-key": "error",
        //    "no-useless-constructor": "off","@typescript-eslint/no-useless-constructor": ["error"],
        "no-useless-rename": "error",
        "no-var": "error",
        "object-shorthand": ["error", "consistent"],
        "prefer-arrow-callback": ["warn"],
        "prefer-const": "error",
        //    "prefer-destructuring": ["error", {"object": true, "array": true}],
        "prefer-numeric-literals": "error",
        "prefer-rest-params": "error",
        "prefer-spread": "error",
        "rest-spread-spacing": ["error", "never"],
        "template-curly-spacing": ["error", "never"],
        "yield-star-spacing": ["error", "before"],
        "@typescript-eslint/explicit-module-boundary-types": "off",
        "@typescript-eslint/no-unused-vars": "off",
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/no-empty-function": [
          "warn",
          {
            "allow": [
              "arrowFunctions",
              // sometimes () => {} is more descriptive than passing undefined
              // sometimes () => {} is more descriptive than passing undefined
              "methods",
              // sometimes you want to provide a default behaviour (nothing) in a base class
              "asyncMethods"
              // same as above
            ]
          }
        ],
        "@typescript-eslint/adjacent-overload-signatures": ["error"],
        "@typescript-eslint/array-type": ["error"],
        "@typescript-eslint/await-thenable": ["error"],
        "@typescript-eslint/class-literal-property-style": ["error"],
        // "@typescript-eslint/consistent-indexed-object-style": ["error"],
        "@typescript-eslint/consistent-type-assertions": ["error"],
        // "@typescript-eslint/consistent-type-definitions": ["error"],
        // "@typescript-eslint/consistent-type-imports": ["error"],
        "@typescript-eslint/member-delimiter-style": "error",
        // "@typescript-eslint/member-ordering": "error",
        "@typescript-eslint/no-confusing-non-null-assertion": "error",
        "@typescript-eslint/no-dynamic-delete": "error",
        "@typescript-eslint/no-require-imports": "error",
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
        // "@typescript-eslint/no-unnecessary-condition": "error",
        "@typescript-eslint/no-unnecessary-type-arguments": "error",
        "@typescript-eslint/no-unnecessary-type-constraint": "error",
        //"@typescript-eslint/no-unsafe-argument": "error",
        //"@typescript-eslint/non-nullable-type-assertion-style": "error",
        "@typescript-eslint/prefer-for-of": "error",
        "@typescript-eslint/prefer-includes": "error",
        "@typescript-eslint/prefer-literal-enum-member": "error",
        "@typescript-eslint/prefer-optional-chain": "error",
        "@typescript-eslint/prefer-string-starts-ends-with": "error",
        "@typescript-eslint/promise-function-async": [
          "error",
          {
            "checkArrowFunctions": false, //This is pretty common apparentyl in our codebase, so disabled for now
            "checkFunctionDeclarations": true,
            "checkFunctionExpressions": true,
            "checkMethodDeclarations": true
          }
        ],
        "@typescript-eslint/type-annotation-spacing": "error",
        "@typescript-eslint/unified-signatures": "error",
        "@typescript-eslint/no-extra-semi": ["error"],
        "@typescript-eslint/no-use-before-define": ["error"],
        "@typescript-eslint/require-await": "off"
      }
    },
    {
      "plugins": [
        "jsonc"
      ],
      "files": ["*.json"], // Specify the extension or pattern you want to parse as JSON.
      "parser": "jsonc-eslint-parser", // Set this parser.
      "extends": [
        "plugin:jsonc/recommended-with-json"
      ],
      "rules": {
        "jsonc/comma-style": ["error", "last"],
        "jsonc/indent": ["error", 2, {}],
        "jsonc/key-spacing": ["error"],
        "jsonc/object-curly-newline": ["error"],
        "jsonc/object-property-newline": ["error"],
        "jsonc/object-curly-spacing": ["error", "never"],
        "jsonc/no-plus-sign": ["error"],
        "jsonc/array-bracket-newline": ["error", "consistent"],
        "jsonc/array-bracket-spacing": ["error", "never"],
        "jsonc/array-element-newline": ["error", "consistent"]
      },
      "parserOptions": {
        "jsonSyntax": "JSON"
      }
    }
  ]
}